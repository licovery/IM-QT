// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: im.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_im_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_im_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_im_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_im_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_im_2eproto;
class InstantMessaging;
class InstantMessagingDefaultTypeInternal;
extern InstantMessagingDefaultTypeInternal _InstantMessaging_default_instance_;
class Interface;
class InterfaceDefaultTypeInternal;
extern InterfaceDefaultTypeInternal _Interface_default_instance_;
class LoginRequest;
class LoginRequestDefaultTypeInternal;
extern LoginRequestDefaultTypeInternal _LoginRequest_default_instance_;
class LoginResponse;
class LoginResponseDefaultTypeInternal;
extern LoginResponseDefaultTypeInternal _LoginResponse_default_instance_;
class OnlineUserRequest;
class OnlineUserRequestDefaultTypeInternal;
extern OnlineUserRequestDefaultTypeInternal _OnlineUserRequest_default_instance_;
class OnlineUserResponse;
class OnlineUserResponseDefaultTypeInternal;
extern OnlineUserResponseDefaultTypeInternal _OnlineUserResponse_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::InstantMessaging* Arena::CreateMaybeMessage<::InstantMessaging>(Arena*);
template<> ::Interface* Arena::CreateMaybeMessage<::Interface>(Arena*);
template<> ::LoginRequest* Arena::CreateMaybeMessage<::LoginRequest>(Arena*);
template<> ::LoginResponse* Arena::CreateMaybeMessage<::LoginResponse>(Arena*);
template<> ::OnlineUserRequest* Arena::CreateMaybeMessage<::OnlineUserRequest>(Arena*);
template<> ::OnlineUserResponse* Arena::CreateMaybeMessage<::OnlineUserResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum InstantMessaging_ServiceType : int {
  InstantMessaging_ServiceType_CHAT = 0,
  InstantMessaging_ServiceType_FILE_TRANS = 1,
  InstantMessaging_ServiceType_InstantMessaging_ServiceType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  InstantMessaging_ServiceType_InstantMessaging_ServiceType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool InstantMessaging_ServiceType_IsValid(int value);
constexpr InstantMessaging_ServiceType InstantMessaging_ServiceType_ServiceType_MIN = InstantMessaging_ServiceType_CHAT;
constexpr InstantMessaging_ServiceType InstantMessaging_ServiceType_ServiceType_MAX = InstantMessaging_ServiceType_FILE_TRANS;
constexpr int InstantMessaging_ServiceType_ServiceType_ARRAYSIZE = InstantMessaging_ServiceType_ServiceType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* InstantMessaging_ServiceType_descriptor();
template<typename T>
inline const std::string& InstantMessaging_ServiceType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, InstantMessaging_ServiceType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function InstantMessaging_ServiceType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    InstantMessaging_ServiceType_descriptor(), enum_t_value);
}
inline bool InstantMessaging_ServiceType_Parse(
    const std::string& name, InstantMessaging_ServiceType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<InstantMessaging_ServiceType>(
    InstantMessaging_ServiceType_descriptor(), name, value);
}
enum LoginResponse_Status : int {
  LoginResponse_Status_SUCC = 0,
  LoginResponse_Status_ID_CONFLICT = 1,
  LoginResponse_Status_OTHER_ERROR = 2,
  LoginResponse_Status_LoginResponse_Status_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  LoginResponse_Status_LoginResponse_Status_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool LoginResponse_Status_IsValid(int value);
constexpr LoginResponse_Status LoginResponse_Status_Status_MIN = LoginResponse_Status_SUCC;
constexpr LoginResponse_Status LoginResponse_Status_Status_MAX = LoginResponse_Status_OTHER_ERROR;
constexpr int LoginResponse_Status_Status_ARRAYSIZE = LoginResponse_Status_Status_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LoginResponse_Status_descriptor();
template<typename T>
inline const std::string& LoginResponse_Status_Name(T enum_t_value) {
  static_assert(::std::is_same<T, LoginResponse_Status>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function LoginResponse_Status_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    LoginResponse_Status_descriptor(), enum_t_value);
}
inline bool LoginResponse_Status_Parse(
    const std::string& name, LoginResponse_Status* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<LoginResponse_Status>(
    LoginResponse_Status_descriptor(), name, value);
}
// ===================================================================

class Interface :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Interface) */ {
 public:
  Interface();
  virtual ~Interface();

  Interface(const Interface& from);
  Interface(Interface&& from) noexcept
    : Interface() {
    *this = ::std::move(from);
  }

  inline Interface& operator=(const Interface& from) {
    CopyFrom(from);
    return *this;
  }
  inline Interface& operator=(Interface&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Interface& default_instance();

  enum InterfaceCase {
    kMsg = 1,
    kOnlineReq = 2,
    kOnlineRsp = 3,
    kLoginReq = 4,
    kLoginRsp = 5,
    INTERFACE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Interface* internal_default_instance() {
    return reinterpret_cast<const Interface*>(
               &_Interface_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Interface& a, Interface& b) {
    a.Swap(&b);
  }
  inline void Swap(Interface* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Interface* New() const final {
    return CreateMaybeMessage<Interface>(nullptr);
  }

  Interface* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Interface>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Interface& from);
  void MergeFrom(const Interface& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Interface* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Interface";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_im_2eproto);
    return ::descriptor_table_im_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 1,
    kOnlineReqFieldNumber = 2,
    kOnlineRspFieldNumber = 3,
    kLoginReqFieldNumber = 4,
    kLoginRspFieldNumber = 5,
  };
  // .InstantMessaging msg = 1;
  bool has_msg() const;
  private:
  bool _internal_has_msg() const;
  public:
  void clear_msg();
  const ::InstantMessaging& msg() const;
  ::InstantMessaging* release_msg();
  ::InstantMessaging* mutable_msg();
  void set_allocated_msg(::InstantMessaging* msg);
  private:
  const ::InstantMessaging& _internal_msg() const;
  ::InstantMessaging* _internal_mutable_msg();
  public:

  // .OnlineUserRequest online_req = 2;
  bool has_online_req() const;
  private:
  bool _internal_has_online_req() const;
  public:
  void clear_online_req();
  const ::OnlineUserRequest& online_req() const;
  ::OnlineUserRequest* release_online_req();
  ::OnlineUserRequest* mutable_online_req();
  void set_allocated_online_req(::OnlineUserRequest* online_req);
  private:
  const ::OnlineUserRequest& _internal_online_req() const;
  ::OnlineUserRequest* _internal_mutable_online_req();
  public:

  // .OnlineUserResponse online_rsp = 3;
  bool has_online_rsp() const;
  private:
  bool _internal_has_online_rsp() const;
  public:
  void clear_online_rsp();
  const ::OnlineUserResponse& online_rsp() const;
  ::OnlineUserResponse* release_online_rsp();
  ::OnlineUserResponse* mutable_online_rsp();
  void set_allocated_online_rsp(::OnlineUserResponse* online_rsp);
  private:
  const ::OnlineUserResponse& _internal_online_rsp() const;
  ::OnlineUserResponse* _internal_mutable_online_rsp();
  public:

  // .LoginRequest login_req = 4;
  bool has_login_req() const;
  private:
  bool _internal_has_login_req() const;
  public:
  void clear_login_req();
  const ::LoginRequest& login_req() const;
  ::LoginRequest* release_login_req();
  ::LoginRequest* mutable_login_req();
  void set_allocated_login_req(::LoginRequest* login_req);
  private:
  const ::LoginRequest& _internal_login_req() const;
  ::LoginRequest* _internal_mutable_login_req();
  public:

  // .LoginResponse login_rsp = 5;
  bool has_login_rsp() const;
  private:
  bool _internal_has_login_rsp() const;
  public:
  void clear_login_rsp();
  const ::LoginResponse& login_rsp() const;
  ::LoginResponse* release_login_rsp();
  ::LoginResponse* mutable_login_rsp();
  void set_allocated_login_rsp(::LoginResponse* login_rsp);
  private:
  const ::LoginResponse& _internal_login_rsp() const;
  ::LoginResponse* _internal_mutable_login_rsp();
  public:

  void clear_interface();
  InterfaceCase interface_case() const;
  // @@protoc_insertion_point(class_scope:Interface)
 private:
  class _Internal;
  void set_has_msg();
  void set_has_online_req();
  void set_has_online_rsp();
  void set_has_login_req();
  void set_has_login_rsp();

  inline bool has_interface() const;
  inline void clear_has_interface();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  union InterfaceUnion {
    InterfaceUnion() {}
    ::InstantMessaging* msg_;
    ::OnlineUserRequest* online_req_;
    ::OnlineUserResponse* online_rsp_;
    ::LoginRequest* login_req_;
    ::LoginResponse* login_rsp_;
  } interface_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_im_2eproto;
};
// -------------------------------------------------------------------

class InstantMessaging :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:InstantMessaging) */ {
 public:
  InstantMessaging();
  virtual ~InstantMessaging();

  InstantMessaging(const InstantMessaging& from);
  InstantMessaging(InstantMessaging&& from) noexcept
    : InstantMessaging() {
    *this = ::std::move(from);
  }

  inline InstantMessaging& operator=(const InstantMessaging& from) {
    CopyFrom(from);
    return *this;
  }
  inline InstantMessaging& operator=(InstantMessaging&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const InstantMessaging& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InstantMessaging* internal_default_instance() {
    return reinterpret_cast<const InstantMessaging*>(
               &_InstantMessaging_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(InstantMessaging& a, InstantMessaging& b) {
    a.Swap(&b);
  }
  inline void Swap(InstantMessaging* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline InstantMessaging* New() const final {
    return CreateMaybeMessage<InstantMessaging>(nullptr);
  }

  InstantMessaging* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InstantMessaging>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const InstantMessaging& from);
  void MergeFrom(const InstantMessaging& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InstantMessaging* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "InstantMessaging";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_im_2eproto);
    return ::descriptor_table_im_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef InstantMessaging_ServiceType ServiceType;
  static constexpr ServiceType CHAT =
    InstantMessaging_ServiceType_CHAT;
  static constexpr ServiceType FILE_TRANS =
    InstantMessaging_ServiceType_FILE_TRANS;
  static inline bool ServiceType_IsValid(int value) {
    return InstantMessaging_ServiceType_IsValid(value);
  }
  static constexpr ServiceType ServiceType_MIN =
    InstantMessaging_ServiceType_ServiceType_MIN;
  static constexpr ServiceType ServiceType_MAX =
    InstantMessaging_ServiceType_ServiceType_MAX;
  static constexpr int ServiceType_ARRAYSIZE =
    InstantMessaging_ServiceType_ServiceType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ServiceType_descriptor() {
    return InstantMessaging_ServiceType_descriptor();
  }
  template<typename T>
  static inline const std::string& ServiceType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ServiceType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ServiceType_Name.");
    return InstantMessaging_ServiceType_Name(enum_t_value);
  }
  static inline bool ServiceType_Parse(const std::string& name,
      ServiceType* value) {
    return InstantMessaging_ServiceType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kFromUserIdFieldNumber = 2,
    kToUserIdFieldNumber = 3,
    kChatMsgFieldNumber = 4,
    kFileContentFieldNumber = 5,
    kServiceFieldNumber = 1,
  };
  // string from_user_id = 2;
  void clear_from_user_id();
  const std::string& from_user_id() const;
  void set_from_user_id(const std::string& value);
  void set_from_user_id(std::string&& value);
  void set_from_user_id(const char* value);
  void set_from_user_id(const char* value, size_t size);
  std::string* mutable_from_user_id();
  std::string* release_from_user_id();
  void set_allocated_from_user_id(std::string* from_user_id);
  private:
  const std::string& _internal_from_user_id() const;
  void _internal_set_from_user_id(const std::string& value);
  std::string* _internal_mutable_from_user_id();
  public:

  // string to_user_id = 3;
  void clear_to_user_id();
  const std::string& to_user_id() const;
  void set_to_user_id(const std::string& value);
  void set_to_user_id(std::string&& value);
  void set_to_user_id(const char* value);
  void set_to_user_id(const char* value, size_t size);
  std::string* mutable_to_user_id();
  std::string* release_to_user_id();
  void set_allocated_to_user_id(std::string* to_user_id);
  private:
  const std::string& _internal_to_user_id() const;
  void _internal_set_to_user_id(const std::string& value);
  std::string* _internal_mutable_to_user_id();
  public:

  // string chat_msg = 4;
  void clear_chat_msg();
  const std::string& chat_msg() const;
  void set_chat_msg(const std::string& value);
  void set_chat_msg(std::string&& value);
  void set_chat_msg(const char* value);
  void set_chat_msg(const char* value, size_t size);
  std::string* mutable_chat_msg();
  std::string* release_chat_msg();
  void set_allocated_chat_msg(std::string* chat_msg);
  private:
  const std::string& _internal_chat_msg() const;
  void _internal_set_chat_msg(const std::string& value);
  std::string* _internal_mutable_chat_msg();
  public:

  // bytes file_content = 5;
  void clear_file_content();
  const std::string& file_content() const;
  void set_file_content(const std::string& value);
  void set_file_content(std::string&& value);
  void set_file_content(const char* value);
  void set_file_content(const void* value, size_t size);
  std::string* mutable_file_content();
  std::string* release_file_content();
  void set_allocated_file_content(std::string* file_content);
  private:
  const std::string& _internal_file_content() const;
  void _internal_set_file_content(const std::string& value);
  std::string* _internal_mutable_file_content();
  public:

  // .InstantMessaging.ServiceType service = 1;
  void clear_service();
  ::InstantMessaging_ServiceType service() const;
  void set_service(::InstantMessaging_ServiceType value);
  private:
  ::InstantMessaging_ServiceType _internal_service() const;
  void _internal_set_service(::InstantMessaging_ServiceType value);
  public:

  // @@protoc_insertion_point(class_scope:InstantMessaging)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr from_user_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr to_user_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr chat_msg_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr file_content_;
  int service_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_im_2eproto;
};
// -------------------------------------------------------------------

class OnlineUserRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:OnlineUserRequest) */ {
 public:
  OnlineUserRequest();
  virtual ~OnlineUserRequest();

  OnlineUserRequest(const OnlineUserRequest& from);
  OnlineUserRequest(OnlineUserRequest&& from) noexcept
    : OnlineUserRequest() {
    *this = ::std::move(from);
  }

  inline OnlineUserRequest& operator=(const OnlineUserRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline OnlineUserRequest& operator=(OnlineUserRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OnlineUserRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OnlineUserRequest* internal_default_instance() {
    return reinterpret_cast<const OnlineUserRequest*>(
               &_OnlineUserRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(OnlineUserRequest& a, OnlineUserRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(OnlineUserRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OnlineUserRequest* New() const final {
    return CreateMaybeMessage<OnlineUserRequest>(nullptr);
  }

  OnlineUserRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OnlineUserRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OnlineUserRequest& from);
  void MergeFrom(const OnlineUserRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OnlineUserRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "OnlineUserRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_im_2eproto);
    return ::descriptor_table_im_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFromUserIdFieldNumber = 1,
  };
  // string from_user_id = 1;
  void clear_from_user_id();
  const std::string& from_user_id() const;
  void set_from_user_id(const std::string& value);
  void set_from_user_id(std::string&& value);
  void set_from_user_id(const char* value);
  void set_from_user_id(const char* value, size_t size);
  std::string* mutable_from_user_id();
  std::string* release_from_user_id();
  void set_allocated_from_user_id(std::string* from_user_id);
  private:
  const std::string& _internal_from_user_id() const;
  void _internal_set_from_user_id(const std::string& value);
  std::string* _internal_mutable_from_user_id();
  public:

  // @@protoc_insertion_point(class_scope:OnlineUserRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr from_user_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_im_2eproto;
};
// -------------------------------------------------------------------

class OnlineUserResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:OnlineUserResponse) */ {
 public:
  OnlineUserResponse();
  virtual ~OnlineUserResponse();

  OnlineUserResponse(const OnlineUserResponse& from);
  OnlineUserResponse(OnlineUserResponse&& from) noexcept
    : OnlineUserResponse() {
    *this = ::std::move(from);
  }

  inline OnlineUserResponse& operator=(const OnlineUserResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline OnlineUserResponse& operator=(OnlineUserResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OnlineUserResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OnlineUserResponse* internal_default_instance() {
    return reinterpret_cast<const OnlineUserResponse*>(
               &_OnlineUserResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(OnlineUserResponse& a, OnlineUserResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(OnlineUserResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OnlineUserResponse* New() const final {
    return CreateMaybeMessage<OnlineUserResponse>(nullptr);
  }

  OnlineUserResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OnlineUserResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OnlineUserResponse& from);
  void MergeFrom(const OnlineUserResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OnlineUserResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "OnlineUserResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_im_2eproto);
    return ::descriptor_table_im_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOnlineUserFieldNumber = 1,
  };
  // repeated string online_user = 1;
  int online_user_size() const;
  private:
  int _internal_online_user_size() const;
  public:
  void clear_online_user();
  const std::string& online_user(int index) const;
  std::string* mutable_online_user(int index);
  void set_online_user(int index, const std::string& value);
  void set_online_user(int index, std::string&& value);
  void set_online_user(int index, const char* value);
  void set_online_user(int index, const char* value, size_t size);
  std::string* add_online_user();
  void add_online_user(const std::string& value);
  void add_online_user(std::string&& value);
  void add_online_user(const char* value);
  void add_online_user(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& online_user() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_online_user();
  private:
  const std::string& _internal_online_user(int index) const;
  std::string* _internal_add_online_user();
  public:

  // @@protoc_insertion_point(class_scope:OnlineUserResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> online_user_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_im_2eproto;
};
// -------------------------------------------------------------------

class LoginRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:LoginRequest) */ {
 public:
  LoginRequest();
  virtual ~LoginRequest();

  LoginRequest(const LoginRequest& from);
  LoginRequest(LoginRequest&& from) noexcept
    : LoginRequest() {
    *this = ::std::move(from);
  }

  inline LoginRequest& operator=(const LoginRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoginRequest& operator=(LoginRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LoginRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LoginRequest* internal_default_instance() {
    return reinterpret_cast<const LoginRequest*>(
               &_LoginRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(LoginRequest& a, LoginRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(LoginRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LoginRequest* New() const final {
    return CreateMaybeMessage<LoginRequest>(nullptr);
  }

  LoginRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LoginRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LoginRequest& from);
  void MergeFrom(const LoginRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoginRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "LoginRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_im_2eproto);
    return ::descriptor_table_im_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 1,
  };
  // string user_id = 1;
  void clear_user_id();
  const std::string& user_id() const;
  void set_user_id(const std::string& value);
  void set_user_id(std::string&& value);
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  std::string* mutable_user_id();
  std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // @@protoc_insertion_point(class_scope:LoginRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_im_2eproto;
};
// -------------------------------------------------------------------

class LoginResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:LoginResponse) */ {
 public:
  LoginResponse();
  virtual ~LoginResponse();

  LoginResponse(const LoginResponse& from);
  LoginResponse(LoginResponse&& from) noexcept
    : LoginResponse() {
    *this = ::std::move(from);
  }

  inline LoginResponse& operator=(const LoginResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoginResponse& operator=(LoginResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LoginResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LoginResponse* internal_default_instance() {
    return reinterpret_cast<const LoginResponse*>(
               &_LoginResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(LoginResponse& a, LoginResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(LoginResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LoginResponse* New() const final {
    return CreateMaybeMessage<LoginResponse>(nullptr);
  }

  LoginResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LoginResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LoginResponse& from);
  void MergeFrom(const LoginResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoginResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "LoginResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_im_2eproto);
    return ::descriptor_table_im_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef LoginResponse_Status Status;
  static constexpr Status SUCC =
    LoginResponse_Status_SUCC;
  static constexpr Status ID_CONFLICT =
    LoginResponse_Status_ID_CONFLICT;
  static constexpr Status OTHER_ERROR =
    LoginResponse_Status_OTHER_ERROR;
  static inline bool Status_IsValid(int value) {
    return LoginResponse_Status_IsValid(value);
  }
  static constexpr Status Status_MIN =
    LoginResponse_Status_Status_MIN;
  static constexpr Status Status_MAX =
    LoginResponse_Status_Status_MAX;
  static constexpr int Status_ARRAYSIZE =
    LoginResponse_Status_Status_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Status_descriptor() {
    return LoginResponse_Status_descriptor();
  }
  template<typename T>
  static inline const std::string& Status_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Status>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Status_Name.");
    return LoginResponse_Status_Name(enum_t_value);
  }
  static inline bool Status_Parse(const std::string& name,
      Status* value) {
    return LoginResponse_Status_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // .LoginResponse.Status result = 1;
  void clear_result();
  ::LoginResponse_Status result() const;
  void set_result(::LoginResponse_Status value);
  private:
  ::LoginResponse_Status _internal_result() const;
  void _internal_set_result(::LoginResponse_Status value);
  public:

  // @@protoc_insertion_point(class_scope:LoginResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  int result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_im_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Interface

// .InstantMessaging msg = 1;
inline bool Interface::_internal_has_msg() const {
  return interface_case() == kMsg;
}
inline bool Interface::has_msg() const {
  return _internal_has_msg();
}
inline void Interface::set_has_msg() {
  _oneof_case_[0] = kMsg;
}
inline void Interface::clear_msg() {
  if (_internal_has_msg()) {
    delete interface_.msg_;
    clear_has_interface();
  }
}
inline ::InstantMessaging* Interface::release_msg() {
  // @@protoc_insertion_point(field_release:Interface.msg)
  if (_internal_has_msg()) {
    clear_has_interface();
      ::InstantMessaging* temp = interface_.msg_;
    interface_.msg_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::InstantMessaging& Interface::_internal_msg() const {
  return _internal_has_msg()
      ? *interface_.msg_
      : *reinterpret_cast< ::InstantMessaging*>(&::_InstantMessaging_default_instance_);
}
inline const ::InstantMessaging& Interface::msg() const {
  // @@protoc_insertion_point(field_get:Interface.msg)
  return _internal_msg();
}
inline ::InstantMessaging* Interface::_internal_mutable_msg() {
  if (!_internal_has_msg()) {
    clear_interface();
    set_has_msg();
    interface_.msg_ = CreateMaybeMessage< ::InstantMessaging >(
        GetArenaNoVirtual());
  }
  return interface_.msg_;
}
inline ::InstantMessaging* Interface::mutable_msg() {
  // @@protoc_insertion_point(field_mutable:Interface.msg)
  return _internal_mutable_msg();
}

// .OnlineUserRequest online_req = 2;
inline bool Interface::_internal_has_online_req() const {
  return interface_case() == kOnlineReq;
}
inline bool Interface::has_online_req() const {
  return _internal_has_online_req();
}
inline void Interface::set_has_online_req() {
  _oneof_case_[0] = kOnlineReq;
}
inline void Interface::clear_online_req() {
  if (_internal_has_online_req()) {
    delete interface_.online_req_;
    clear_has_interface();
  }
}
inline ::OnlineUserRequest* Interface::release_online_req() {
  // @@protoc_insertion_point(field_release:Interface.online_req)
  if (_internal_has_online_req()) {
    clear_has_interface();
      ::OnlineUserRequest* temp = interface_.online_req_;
    interface_.online_req_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::OnlineUserRequest& Interface::_internal_online_req() const {
  return _internal_has_online_req()
      ? *interface_.online_req_
      : *reinterpret_cast< ::OnlineUserRequest*>(&::_OnlineUserRequest_default_instance_);
}
inline const ::OnlineUserRequest& Interface::online_req() const {
  // @@protoc_insertion_point(field_get:Interface.online_req)
  return _internal_online_req();
}
inline ::OnlineUserRequest* Interface::_internal_mutable_online_req() {
  if (!_internal_has_online_req()) {
    clear_interface();
    set_has_online_req();
    interface_.online_req_ = CreateMaybeMessage< ::OnlineUserRequest >(
        GetArenaNoVirtual());
  }
  return interface_.online_req_;
}
inline ::OnlineUserRequest* Interface::mutable_online_req() {
  // @@protoc_insertion_point(field_mutable:Interface.online_req)
  return _internal_mutable_online_req();
}

// .OnlineUserResponse online_rsp = 3;
inline bool Interface::_internal_has_online_rsp() const {
  return interface_case() == kOnlineRsp;
}
inline bool Interface::has_online_rsp() const {
  return _internal_has_online_rsp();
}
inline void Interface::set_has_online_rsp() {
  _oneof_case_[0] = kOnlineRsp;
}
inline void Interface::clear_online_rsp() {
  if (_internal_has_online_rsp()) {
    delete interface_.online_rsp_;
    clear_has_interface();
  }
}
inline ::OnlineUserResponse* Interface::release_online_rsp() {
  // @@protoc_insertion_point(field_release:Interface.online_rsp)
  if (_internal_has_online_rsp()) {
    clear_has_interface();
      ::OnlineUserResponse* temp = interface_.online_rsp_;
    interface_.online_rsp_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::OnlineUserResponse& Interface::_internal_online_rsp() const {
  return _internal_has_online_rsp()
      ? *interface_.online_rsp_
      : *reinterpret_cast< ::OnlineUserResponse*>(&::_OnlineUserResponse_default_instance_);
}
inline const ::OnlineUserResponse& Interface::online_rsp() const {
  // @@protoc_insertion_point(field_get:Interface.online_rsp)
  return _internal_online_rsp();
}
inline ::OnlineUserResponse* Interface::_internal_mutable_online_rsp() {
  if (!_internal_has_online_rsp()) {
    clear_interface();
    set_has_online_rsp();
    interface_.online_rsp_ = CreateMaybeMessage< ::OnlineUserResponse >(
        GetArenaNoVirtual());
  }
  return interface_.online_rsp_;
}
inline ::OnlineUserResponse* Interface::mutable_online_rsp() {
  // @@protoc_insertion_point(field_mutable:Interface.online_rsp)
  return _internal_mutable_online_rsp();
}

// .LoginRequest login_req = 4;
inline bool Interface::_internal_has_login_req() const {
  return interface_case() == kLoginReq;
}
inline bool Interface::has_login_req() const {
  return _internal_has_login_req();
}
inline void Interface::set_has_login_req() {
  _oneof_case_[0] = kLoginReq;
}
inline void Interface::clear_login_req() {
  if (_internal_has_login_req()) {
    delete interface_.login_req_;
    clear_has_interface();
  }
}
inline ::LoginRequest* Interface::release_login_req() {
  // @@protoc_insertion_point(field_release:Interface.login_req)
  if (_internal_has_login_req()) {
    clear_has_interface();
      ::LoginRequest* temp = interface_.login_req_;
    interface_.login_req_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::LoginRequest& Interface::_internal_login_req() const {
  return _internal_has_login_req()
      ? *interface_.login_req_
      : *reinterpret_cast< ::LoginRequest*>(&::_LoginRequest_default_instance_);
}
inline const ::LoginRequest& Interface::login_req() const {
  // @@protoc_insertion_point(field_get:Interface.login_req)
  return _internal_login_req();
}
inline ::LoginRequest* Interface::_internal_mutable_login_req() {
  if (!_internal_has_login_req()) {
    clear_interface();
    set_has_login_req();
    interface_.login_req_ = CreateMaybeMessage< ::LoginRequest >(
        GetArenaNoVirtual());
  }
  return interface_.login_req_;
}
inline ::LoginRequest* Interface::mutable_login_req() {
  // @@protoc_insertion_point(field_mutable:Interface.login_req)
  return _internal_mutable_login_req();
}

// .LoginResponse login_rsp = 5;
inline bool Interface::_internal_has_login_rsp() const {
  return interface_case() == kLoginRsp;
}
inline bool Interface::has_login_rsp() const {
  return _internal_has_login_rsp();
}
inline void Interface::set_has_login_rsp() {
  _oneof_case_[0] = kLoginRsp;
}
inline void Interface::clear_login_rsp() {
  if (_internal_has_login_rsp()) {
    delete interface_.login_rsp_;
    clear_has_interface();
  }
}
inline ::LoginResponse* Interface::release_login_rsp() {
  // @@protoc_insertion_point(field_release:Interface.login_rsp)
  if (_internal_has_login_rsp()) {
    clear_has_interface();
      ::LoginResponse* temp = interface_.login_rsp_;
    interface_.login_rsp_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::LoginResponse& Interface::_internal_login_rsp() const {
  return _internal_has_login_rsp()
      ? *interface_.login_rsp_
      : *reinterpret_cast< ::LoginResponse*>(&::_LoginResponse_default_instance_);
}
inline const ::LoginResponse& Interface::login_rsp() const {
  // @@protoc_insertion_point(field_get:Interface.login_rsp)
  return _internal_login_rsp();
}
inline ::LoginResponse* Interface::_internal_mutable_login_rsp() {
  if (!_internal_has_login_rsp()) {
    clear_interface();
    set_has_login_rsp();
    interface_.login_rsp_ = CreateMaybeMessage< ::LoginResponse >(
        GetArenaNoVirtual());
  }
  return interface_.login_rsp_;
}
inline ::LoginResponse* Interface::mutable_login_rsp() {
  // @@protoc_insertion_point(field_mutable:Interface.login_rsp)
  return _internal_mutable_login_rsp();
}

inline bool Interface::has_interface() const {
  return interface_case() != INTERFACE_NOT_SET;
}
inline void Interface::clear_has_interface() {
  _oneof_case_[0] = INTERFACE_NOT_SET;
}
inline Interface::InterfaceCase Interface::interface_case() const {
  return Interface::InterfaceCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// InstantMessaging

// .InstantMessaging.ServiceType service = 1;
inline void InstantMessaging::clear_service() {
  service_ = 0;
}
inline ::InstantMessaging_ServiceType InstantMessaging::_internal_service() const {
  return static_cast< ::InstantMessaging_ServiceType >(service_);
}
inline ::InstantMessaging_ServiceType InstantMessaging::service() const {
  // @@protoc_insertion_point(field_get:InstantMessaging.service)
  return _internal_service();
}
inline void InstantMessaging::_internal_set_service(::InstantMessaging_ServiceType value) {
  
  service_ = value;
}
inline void InstantMessaging::set_service(::InstantMessaging_ServiceType value) {
  _internal_set_service(value);
  // @@protoc_insertion_point(field_set:InstantMessaging.service)
}

// string from_user_id = 2;
inline void InstantMessaging::clear_from_user_id() {
  from_user_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& InstantMessaging::from_user_id() const {
  // @@protoc_insertion_point(field_get:InstantMessaging.from_user_id)
  return _internal_from_user_id();
}
inline void InstantMessaging::set_from_user_id(const std::string& value) {
  _internal_set_from_user_id(value);
  // @@protoc_insertion_point(field_set:InstantMessaging.from_user_id)
}
inline std::string* InstantMessaging::mutable_from_user_id() {
  // @@protoc_insertion_point(field_mutable:InstantMessaging.from_user_id)
  return _internal_mutable_from_user_id();
}
inline const std::string& InstantMessaging::_internal_from_user_id() const {
  return from_user_id_.GetNoArena();
}
inline void InstantMessaging::_internal_set_from_user_id(const std::string& value) {
  
  from_user_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void InstantMessaging::set_from_user_id(std::string&& value) {
  
  from_user_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:InstantMessaging.from_user_id)
}
inline void InstantMessaging::set_from_user_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  from_user_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:InstantMessaging.from_user_id)
}
inline void InstantMessaging::set_from_user_id(const char* value, size_t size) {
  
  from_user_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:InstantMessaging.from_user_id)
}
inline std::string* InstantMessaging::_internal_mutable_from_user_id() {
  
  return from_user_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* InstantMessaging::release_from_user_id() {
  // @@protoc_insertion_point(field_release:InstantMessaging.from_user_id)
  
  return from_user_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void InstantMessaging::set_allocated_from_user_id(std::string* from_user_id) {
  if (from_user_id != nullptr) {
    
  } else {
    
  }
  from_user_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from_user_id);
  // @@protoc_insertion_point(field_set_allocated:InstantMessaging.from_user_id)
}

// string to_user_id = 3;
inline void InstantMessaging::clear_to_user_id() {
  to_user_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& InstantMessaging::to_user_id() const {
  // @@protoc_insertion_point(field_get:InstantMessaging.to_user_id)
  return _internal_to_user_id();
}
inline void InstantMessaging::set_to_user_id(const std::string& value) {
  _internal_set_to_user_id(value);
  // @@protoc_insertion_point(field_set:InstantMessaging.to_user_id)
}
inline std::string* InstantMessaging::mutable_to_user_id() {
  // @@protoc_insertion_point(field_mutable:InstantMessaging.to_user_id)
  return _internal_mutable_to_user_id();
}
inline const std::string& InstantMessaging::_internal_to_user_id() const {
  return to_user_id_.GetNoArena();
}
inline void InstantMessaging::_internal_set_to_user_id(const std::string& value) {
  
  to_user_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void InstantMessaging::set_to_user_id(std::string&& value) {
  
  to_user_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:InstantMessaging.to_user_id)
}
inline void InstantMessaging::set_to_user_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  to_user_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:InstantMessaging.to_user_id)
}
inline void InstantMessaging::set_to_user_id(const char* value, size_t size) {
  
  to_user_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:InstantMessaging.to_user_id)
}
inline std::string* InstantMessaging::_internal_mutable_to_user_id() {
  
  return to_user_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* InstantMessaging::release_to_user_id() {
  // @@protoc_insertion_point(field_release:InstantMessaging.to_user_id)
  
  return to_user_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void InstantMessaging::set_allocated_to_user_id(std::string* to_user_id) {
  if (to_user_id != nullptr) {
    
  } else {
    
  }
  to_user_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), to_user_id);
  // @@protoc_insertion_point(field_set_allocated:InstantMessaging.to_user_id)
}

// string chat_msg = 4;
inline void InstantMessaging::clear_chat_msg() {
  chat_msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& InstantMessaging::chat_msg() const {
  // @@protoc_insertion_point(field_get:InstantMessaging.chat_msg)
  return _internal_chat_msg();
}
inline void InstantMessaging::set_chat_msg(const std::string& value) {
  _internal_set_chat_msg(value);
  // @@protoc_insertion_point(field_set:InstantMessaging.chat_msg)
}
inline std::string* InstantMessaging::mutable_chat_msg() {
  // @@protoc_insertion_point(field_mutable:InstantMessaging.chat_msg)
  return _internal_mutable_chat_msg();
}
inline const std::string& InstantMessaging::_internal_chat_msg() const {
  return chat_msg_.GetNoArena();
}
inline void InstantMessaging::_internal_set_chat_msg(const std::string& value) {
  
  chat_msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void InstantMessaging::set_chat_msg(std::string&& value) {
  
  chat_msg_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:InstantMessaging.chat_msg)
}
inline void InstantMessaging::set_chat_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  chat_msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:InstantMessaging.chat_msg)
}
inline void InstantMessaging::set_chat_msg(const char* value, size_t size) {
  
  chat_msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:InstantMessaging.chat_msg)
}
inline std::string* InstantMessaging::_internal_mutable_chat_msg() {
  
  return chat_msg_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* InstantMessaging::release_chat_msg() {
  // @@protoc_insertion_point(field_release:InstantMessaging.chat_msg)
  
  return chat_msg_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void InstantMessaging::set_allocated_chat_msg(std::string* chat_msg) {
  if (chat_msg != nullptr) {
    
  } else {
    
  }
  chat_msg_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), chat_msg);
  // @@protoc_insertion_point(field_set_allocated:InstantMessaging.chat_msg)
}

// bytes file_content = 5;
inline void InstantMessaging::clear_file_content() {
  file_content_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& InstantMessaging::file_content() const {
  // @@protoc_insertion_point(field_get:InstantMessaging.file_content)
  return _internal_file_content();
}
inline void InstantMessaging::set_file_content(const std::string& value) {
  _internal_set_file_content(value);
  // @@protoc_insertion_point(field_set:InstantMessaging.file_content)
}
inline std::string* InstantMessaging::mutable_file_content() {
  // @@protoc_insertion_point(field_mutable:InstantMessaging.file_content)
  return _internal_mutable_file_content();
}
inline const std::string& InstantMessaging::_internal_file_content() const {
  return file_content_.GetNoArena();
}
inline void InstantMessaging::_internal_set_file_content(const std::string& value) {
  
  file_content_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void InstantMessaging::set_file_content(std::string&& value) {
  
  file_content_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:InstantMessaging.file_content)
}
inline void InstantMessaging::set_file_content(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  file_content_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:InstantMessaging.file_content)
}
inline void InstantMessaging::set_file_content(const void* value, size_t size) {
  
  file_content_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:InstantMessaging.file_content)
}
inline std::string* InstantMessaging::_internal_mutable_file_content() {
  
  return file_content_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* InstantMessaging::release_file_content() {
  // @@protoc_insertion_point(field_release:InstantMessaging.file_content)
  
  return file_content_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void InstantMessaging::set_allocated_file_content(std::string* file_content) {
  if (file_content != nullptr) {
    
  } else {
    
  }
  file_content_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), file_content);
  // @@protoc_insertion_point(field_set_allocated:InstantMessaging.file_content)
}

// -------------------------------------------------------------------

// OnlineUserRequest

// string from_user_id = 1;
inline void OnlineUserRequest::clear_from_user_id() {
  from_user_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& OnlineUserRequest::from_user_id() const {
  // @@protoc_insertion_point(field_get:OnlineUserRequest.from_user_id)
  return _internal_from_user_id();
}
inline void OnlineUserRequest::set_from_user_id(const std::string& value) {
  _internal_set_from_user_id(value);
  // @@protoc_insertion_point(field_set:OnlineUserRequest.from_user_id)
}
inline std::string* OnlineUserRequest::mutable_from_user_id() {
  // @@protoc_insertion_point(field_mutable:OnlineUserRequest.from_user_id)
  return _internal_mutable_from_user_id();
}
inline const std::string& OnlineUserRequest::_internal_from_user_id() const {
  return from_user_id_.GetNoArena();
}
inline void OnlineUserRequest::_internal_set_from_user_id(const std::string& value) {
  
  from_user_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void OnlineUserRequest::set_from_user_id(std::string&& value) {
  
  from_user_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:OnlineUserRequest.from_user_id)
}
inline void OnlineUserRequest::set_from_user_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  from_user_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:OnlineUserRequest.from_user_id)
}
inline void OnlineUserRequest::set_from_user_id(const char* value, size_t size) {
  
  from_user_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:OnlineUserRequest.from_user_id)
}
inline std::string* OnlineUserRequest::_internal_mutable_from_user_id() {
  
  return from_user_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* OnlineUserRequest::release_from_user_id() {
  // @@protoc_insertion_point(field_release:OnlineUserRequest.from_user_id)
  
  return from_user_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void OnlineUserRequest::set_allocated_from_user_id(std::string* from_user_id) {
  if (from_user_id != nullptr) {
    
  } else {
    
  }
  from_user_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from_user_id);
  // @@protoc_insertion_point(field_set_allocated:OnlineUserRequest.from_user_id)
}

// -------------------------------------------------------------------

// OnlineUserResponse

// repeated string online_user = 1;
inline int OnlineUserResponse::_internal_online_user_size() const {
  return online_user_.size();
}
inline int OnlineUserResponse::online_user_size() const {
  return _internal_online_user_size();
}
inline void OnlineUserResponse::clear_online_user() {
  online_user_.Clear();
}
inline std::string* OnlineUserResponse::add_online_user() {
  // @@protoc_insertion_point(field_add_mutable:OnlineUserResponse.online_user)
  return _internal_add_online_user();
}
inline const std::string& OnlineUserResponse::_internal_online_user(int index) const {
  return online_user_.Get(index);
}
inline const std::string& OnlineUserResponse::online_user(int index) const {
  // @@protoc_insertion_point(field_get:OnlineUserResponse.online_user)
  return _internal_online_user(index);
}
inline std::string* OnlineUserResponse::mutable_online_user(int index) {
  // @@protoc_insertion_point(field_mutable:OnlineUserResponse.online_user)
  return online_user_.Mutable(index);
}
inline void OnlineUserResponse::set_online_user(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:OnlineUserResponse.online_user)
  online_user_.Mutable(index)->assign(value);
}
inline void OnlineUserResponse::set_online_user(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:OnlineUserResponse.online_user)
  online_user_.Mutable(index)->assign(std::move(value));
}
inline void OnlineUserResponse::set_online_user(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  online_user_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:OnlineUserResponse.online_user)
}
inline void OnlineUserResponse::set_online_user(int index, const char* value, size_t size) {
  online_user_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:OnlineUserResponse.online_user)
}
inline std::string* OnlineUserResponse::_internal_add_online_user() {
  return online_user_.Add();
}
inline void OnlineUserResponse::add_online_user(const std::string& value) {
  online_user_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:OnlineUserResponse.online_user)
}
inline void OnlineUserResponse::add_online_user(std::string&& value) {
  online_user_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:OnlineUserResponse.online_user)
}
inline void OnlineUserResponse::add_online_user(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  online_user_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:OnlineUserResponse.online_user)
}
inline void OnlineUserResponse::add_online_user(const char* value, size_t size) {
  online_user_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:OnlineUserResponse.online_user)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
OnlineUserResponse::online_user() const {
  // @@protoc_insertion_point(field_list:OnlineUserResponse.online_user)
  return online_user_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
OnlineUserResponse::mutable_online_user() {
  // @@protoc_insertion_point(field_mutable_list:OnlineUserResponse.online_user)
  return &online_user_;
}

// -------------------------------------------------------------------

// LoginRequest

// string user_id = 1;
inline void LoginRequest::clear_user_id() {
  user_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& LoginRequest::user_id() const {
  // @@protoc_insertion_point(field_get:LoginRequest.user_id)
  return _internal_user_id();
}
inline void LoginRequest::set_user_id(const std::string& value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:LoginRequest.user_id)
}
inline std::string* LoginRequest::mutable_user_id() {
  // @@protoc_insertion_point(field_mutable:LoginRequest.user_id)
  return _internal_mutable_user_id();
}
inline const std::string& LoginRequest::_internal_user_id() const {
  return user_id_.GetNoArena();
}
inline void LoginRequest::_internal_set_user_id(const std::string& value) {
  
  user_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void LoginRequest::set_user_id(std::string&& value) {
  
  user_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LoginRequest.user_id)
}
inline void LoginRequest::set_user_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LoginRequest.user_id)
}
inline void LoginRequest::set_user_id(const char* value, size_t size) {
  
  user_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LoginRequest.user_id)
}
inline std::string* LoginRequest::_internal_mutable_user_id() {
  
  return user_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* LoginRequest::release_user_id() {
  // @@protoc_insertion_point(field_release:LoginRequest.user_id)
  
  return user_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void LoginRequest::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    
  } else {
    
  }
  user_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_id);
  // @@protoc_insertion_point(field_set_allocated:LoginRequest.user_id)
}

// -------------------------------------------------------------------

// LoginResponse

// .LoginResponse.Status result = 1;
inline void LoginResponse::clear_result() {
  result_ = 0;
}
inline ::LoginResponse_Status LoginResponse::_internal_result() const {
  return static_cast< ::LoginResponse_Status >(result_);
}
inline ::LoginResponse_Status LoginResponse::result() const {
  // @@protoc_insertion_point(field_get:LoginResponse.result)
  return _internal_result();
}
inline void LoginResponse::_internal_set_result(::LoginResponse_Status value) {
  
  result_ = value;
}
inline void LoginResponse::set_result(::LoginResponse_Status value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:LoginResponse.result)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::InstantMessaging_ServiceType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::InstantMessaging_ServiceType>() {
  return ::InstantMessaging_ServiceType_descriptor();
}
template <> struct is_proto_enum< ::LoginResponse_Status> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::LoginResponse_Status>() {
  return ::LoginResponse_Status_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_im_2eproto
